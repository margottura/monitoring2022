#RandomForest
#load required libraries
library(spatialEco)
library(dismo)
library(disdat)
library(sf)
library(randomForest)
library(geodata)
library(dplyr)
library(tidyr)

setwd("C:/Documenti/Laurea magistrale/Tirocinio Duccio")

#upload occurrence data from gbif
m_occ <- read.csv("m_occ.csv", sep="\t")
m_occ

#wordlclim data
#Brisbane wordlclim data
wclim_aus <- worldclim_country("AUS", var="bio", res=10, versione="2.1", path="C:/Documenti/Laurea magistrale/Tirocinio Duccio")
names(wclim_aus)<- c("Annual Mean Temperature", "Mean Diurnal Range", "Isothermality", "Temperature Seasonality", "Max Temperature of Warmest Month", "Min Temperature of Coldest Month", "Temperature Annual Range", "Mean Temperature of Wettest Quarter", "Mean Temperature of Driest Quarter", "Mean Temperature of Warmest Quarter", "Mean Temperature of Coldest Quarter", "Annual Precipitation", "Precipitation of Wettest Month", "Precipitation of Driest Month", "Precipitation Seasonality", "Precipitation of Wettest Quarter", "Precipitation of Driest Quarter", "Precipitation of Warmest Quarter", "Precipitation of Coldest Quarter")

#crop for Brisbane area (lat min 153, lat max 153.5, lon min -27.5, lon max -27.1)
bne_ext <- c(153, 153.5, -27.5, -27.1)
ext <- extent(bne_ext[1], bne_ext[2], bne_ext[3], bne_ext[4])

wclim_bne <- crop(wclim_aus, ext)
wclim_bne <- wclim_bne[[c(2,3,5,6,10,17,19)]]
wclim_bne

#create a stack of raster with bne wclim data
bne_stack <- stack(wclim_bne)
bne_stack

#generating background points
bg <- randomPoints(bne_stack, n=500)%>%as.data.frame()
colnames(bg) <- c("decimalLongitude", "decimalLatitude")
bg <- bg[, c(2,1)]

occurrences <- m_occ[, c("decimalLatitude", "decimalLongitude")]%>%as.data.frame()
occurrences

#extract raster values and create training data
training <- bind_rows(occurrences, bg)%>%mutate(occ = c(rep(1, nrow(occurrences)), rep(0, nrow(bg))))

#turn training data into spatial points
coordinates(training) <- ~ decimalLongitude + decimalLatitude
cat("the previous object is: ", class(training),"\n") 
head(training@coords)
crs(training)
# Define the coordinate system that will be used
myCRS <- CRS("+init=epsg:4326") # WGS 84
crs(training) <- myCRS
crs(training)

raster::pairs(bne_stack,maxpixels=1000)

training <- extract(bne_stack, training)
training <- as.data.frame(training)
training$occ <- c(rep(1, nrow(occurrences)), rep(0, nrow(bg)))
training <- na.omit(training)

head(training)

#model fitting with randomForest 
#default (classification) RF
training$occ <- as.factor(training$occ)

#default classification RF
rf_def <- randomForest(occ~ ., data=training, ntree=1000)

#predict to raster layers
pred_def <- predict(bne_stack, rf_def, type="prob", index=2)

plot(pred_def)

#now RF down-sampled
# calculate sub-samples
prNum <- as.numeric(table(training$occ)["1"]) # number of presence records
spsize <- c("0" = prNum, "1" = prNum) # sample size for both classes

training_sampled <- do.call(rbind, lapply(split(training, training$occ), 
                                          function(x) x[sample(1:nrow(x), spsize[as.character(x$occ[1])]),]))

rf_dws <- randomForest(occ~ ., data=training_sampled, ntree=1000)

# predict to raster layers
pred_dws <-  predict(bne_stack, rf_dws, type = "prob", index = 2)
plot(pred_dws)

#let's compare the two methods
par(mfrow = c(1, 2))
plot(pred_def, main = "RF default")
plot(pred_dws, main = "Rf down-sampled")
