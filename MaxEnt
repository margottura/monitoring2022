#MaxEnt
#https://shandongfx.github.io/NIMBioSENM/06-maxent-manipulation/index.html
#let's load all the packages
packages_needed <- c("raster", # for raster analysis
                     "dismo", # a collection of ENM/SDM tools
                     "rgeos","rgdal","sp", # spatial data analysis
                     "ENMeval", # a few new tools in ENM/SDM
                     "wallace",   # interface for Maxent and ENMeval
                     "utils", # for zip & unzip files
                     "jsonlite" # necessary for download data from GBIF
)

pk_to_install <- packages_needed [!( packages_needed %in% rownames(installed.packages())  )]
if(length(pk_to_install)>0 ){
  install.packages(pk_to_install,repos="http://cran.r-project.org")
}

library(raster)
library(dismo)
library(rgeos)
library(sp)
library(rgdal)
library(ENMeval)
library(geodata)

if( !("rJava" %in% rownames(installed.packages()))  ){
  install.packages("rJava",repos="http://cran.r-project.org")
}
install.packages("rJava")
library("rJava")

if(!require(devtools)){
  install.packages("devtools")
}

if(!require(kuenm)){
  devtools::install_github("marlonecobos/kuenm")
}
install.packages("kuenm")
library("kuenm")

#lnow let's set up the Maxent path
# download maxent.jar 3.3.3k, and place the file in the desired folder; note that, there may be a newer version of Maxent
if( !file.exists(paste0(system.file("java", package="dismo"),"/maxent.jar"))  )   {
  utils::download.file(url="https://raw.githubusercontent.com/mrmaxent/Maxent/master/ArchivedReleases/3.3.3k/maxent.jar",
                       destfile=paste0(system.file("java", package="dismo"),"/maxent.jar"),
                       mode="wb") ## wb for binary file, otherwise maxent.jar can not execute
}
# also note that both R and Java need to be the same bit (either 32 or 64) to be compatible to run

# to increase memory size of the JVM and prevent memory issues with Maxent.jar
# options( java.parameters = c("-Xss2560k", "-Xmx2g") ) 

#set up the working directory of R
setwd("C:/Documenti/Laurea magistrale/Tirocinio Duccio")

if(!file.exists("code")) dir.create("code")
if(!file.exists("data")) dir.create("data")
if(!file.exists("data/bioclim")) dir.create("data/bioclim")
if(!file.exists("data/studyarea")) dir.create("data/studyarea")
if(!file.exists("output")) dir.create("output")

#upload occurrence data from gbif
m_occ <- read.csv("m_occ.csv", sep="\t")

#make occurrence data spatial
coordinates(m_occ) <- ~ decimalLongitude + decimalLatitude


cat("the previous object is: ", class(m_occ),"\n") 
head(m_occ@coords)
crs(m_occ)
# Define the coordinate system that will be used
myCRS <- CRS("+init=epsg:4326") # WGS 84
crs(m_occ) <- myCRS
crs(m_occ)

#crs projections
m_occ_projected <- spTransform(m_occ, myCRS)
plot(m_occ)
plot(m_occ_projected)

#read/write shapefile files
dir.create("temp")
shapefile(m_occ, "temp/m_occ.shp", overwrite=TRUE)
loaded_shapefile <- shapefile("temp/m_occ.shp")

#raster data
library("raster")
require(utils)
if(!file.exists("data")) dir.create("data")
if(!file.exists("data/bioclim")) dir.create("data/bioclim")
if(!file.exists("data/studyarea")) dir.create("data/studyarea")
if(!file.exists("output")) dir.create("output")

#wordlclim data
#Brisbane wordlclim data
wclim_aus <- worldclim_country("AUS", var="bio", res=10, versione="2.1", path="C:/Documenti/Laurea magistrale/Tirocinio Duccio")
wclim_aus
names(wclim_aus)<- c("Annual Mean Temperature", "Mean Diurnal Range", "Isothermality", "Temperature Seasonality", "Max Temperature of Warmest Month", "Min Temperature of Coldest Month", "Temperature Annual Range", "Mean Temperature of Wettest Quarter", "Mean Temperature of Driest Quarter", "Mean Temperature of Warmest Quarter", "Mean Temperature of Coldest Quarter", "Annual Precipitation", "Precipitation of Wettest Month", "Precipitation of Driest Month", "Precipitation Seasonality", "Precipitation of Wettest Quarter", "Precipitation of Driest Quarter", "Precipitation of Warmest Quarter", "Precipitation of Coldest Quarter")

#crop for Brisbane area (lat min 153, lat max 153.5, lon min -27.5, lon max -27.1)
bne_ext <- c(153, 153.5, -27.5, -27.1)
ext <- extent(bne_ext[1], bne_ext[2], bne_ext[3], bne_ext[4])

wclim_bne <- crop(wclim_aus, ext)
wclim_bne
plot(wclim_bne)

#create a stack of raster with bne wclim data
bne_stack <- stack(wclim_bne)
bne_stack <- bne_stack[[c(2,3,5,6,10,17,19)]]

raster::pairs(bne_stack,maxpixels=1000)


#spatial analysis
#prepare occ and raster
plot(bne_stack$Mean.Diurnal.Range)
plot(m_occ, add=T)

#extract environmental conditions of occ raster layers
conditions_occ <- extract(bne_stack, m_occ)
head(conditions_occ)

#remove NA
bad_records <- is.na(conditions_occ[,1])
table(bad_records)

conditions_occ[bad_records,]
m_occ <- m_occ[!bad_records,]

#cut the raster layer with fine boundry
occ_buffer <- buffer(m_occ, width=5*10^5)
clim_mask <- mask(bne_stack, occ_buffer)

#draw background samples
set.seed(1)
bg <- sampleRandom(x=clim_mask, size=700, na.rm=T, sp=T)
head(bg)

plot(clim_mask[[1]])
plot(bg, add=T, col="black")
plot(m_occ, add=T, col="red")

#split occurrence data into training and testing
#randomly select 80% for training
selected <- sample(1:nrow(m_occ), nrow(m_occ)*0.8)
occ_train <- m_occ[selected,]
occ_test <- m_occ[-selected,]

plot(occ_train, col="blue")
plot(occ_test, col="red", add=T)

#simple modeling workflow
#re-format data input for maxent
cat(class(clim_mask), "", class(m_occ))
m0 <- maxent(x=clim_mask, p=m_occ)

#extract env condition for training, testing and background data
env_occ_train <- extract(bne_stack, occ_train)
env_occ_test <- extract(bne_stack, occ_test)
env_bg <- extract(bne_stack, bg)

#combine the conditions by row
myPredictors <- rbind(env_occ_train, env_bg)

#change matrix to dataframe
myPredictors <- as.data.frame(myPredictors)
head(myPredictors)

# repeat the number 1 as many times as the number of rows in p, 
# and repeat 0 for the rows of background points
myResponse <- c(rep(1,nrow(env_occ_train)),
                rep(0,nrow(env_bg)))

mod <- maxent(x=myPredictors, p=myResponse)
mod@lambdas

#predict function
#project model on raster layers (training layers)
ped1 <- predict(mod, clim_mask)
plot(ped1)

ped2 <- predict(mod, env_occ_train)
head(ped2)

#model evaluation
mod_eval_train <- dismo::evaluate(p=env_occ_train, a=env_bg, model=mod)
print(mod_eval_train)

#testing data
mod_eval_test <- dismo::evaluate(p=env_occ_test, a=env_bg, model=mod)
print(mod_eval_test)

#compare training and testing AUC
cat("the training AUC is:", mod_eval_train@auc, "\n")

cat("the testing AUC is:", mod_eval_test@auc, "\n")

#tresholds our continuous predictions of suitability into binary predictions 
thd1 <- threshold(mod_eval_train,stat="no_omission") # 0% omission rate 
thd2 <- threshold(mod_eval_train,stat="spec_sens") # highest TSS
thd3 <- threshold(mod_eval_train,stat="sensitivity",sensitivity=0.9) # 10% omission rate, i.e. sensitivity=0.9
thd4 <- threshold(mod_eval_train,stat="sensitivity",sensitivity=0.95) # 5% omission rate, i.e. sensitivity=0.95

plot(ped1>=thd1)

#model manipulations
#change output path
dir.create("output")
dir.create("output/maxent_output")

# to train Maxent with tabular data
mod <- dismo::maxent(x=myPredictors, ## env conditions
                     p=myResponse,   ## 1:presence or 0:absence
                     path=paste0(getwd(),"/output/maxent_outputs")
)

list.files( paste0(getwd(),"/output/maxent_outputs" )  )

#change default parameters
if(!require(devtools)){
  install.packages("devtools")
}
devtools::source_url("https://raw.githubusercontent.com/shandongfx/nimbios_enm/master/Appendix2_prepPara.R")

#get a list of default settings
myparameters <- prepPara(userfeatures=NULL) 
print(myparameters)

# training a maxent model with dataframes
mod <- dismo::maxent(x=myPredictors, ## env conditions
                     p=myResponse,   ## 1:presence or 0:absence
                     args=myparameters  )

#select features
myparameters1 <- prepPara(userfeatures="LQ")
mod1_lq <- maxent(x=myPredictors,
                  p=myResponse,
                  path=paste0(getwd(),"/output/maxent_outputs1_lq"),
                  args=myparameters1 )

#change beta-multiplier
myparameters2 <- prepPara(userfeatures="LQH", betamultiplier=0.1)
# change beta-multiplier for all features to 0.5, the default beta-multiplier is 1
mod2_fix <- maxent(x=myPredictors,
                   p=myResponse,
                   path=paste0(getwd(),"/output/maxent_outputs2_0.1"), 
                   args=myparameters2  ) 

myparameters3 <- prepPara(userfeatures="LQH", betamultiplier=10)
mod2_relax <- maxent(x=myPredictors, p=myResponse,
                     path=paste0(getwd(), "/output/maxent_outputs2_10"), 
                     args=myparameters3  )
#We can also set different beta-multiplers for different features.
#beta_threshold= 1
#beta_categorical=1
#beta_lqp=1
#beta_hinge=1`

#specify projection layers
myparameters4 <- prepPara(userfeatures="LQH",## include L, Q, H features
                          beta_lqp=1.5,      ## use different beta-multiplier for different features
                          beta_hinge=0.5 )

mod2_complex <- maxent(x=myPredictors,
                       p=myResponse,
                       path=paste0(getwd(),"/output/maxent_outputs2_complex"), 
                       args=myparameters4)

#specify projection layers
#train the model and create a prediction simultaneously
myparameters5 <- prepPara(userfeatures="LQ",
                          betamultiplier=1,
                          projectionlayers=paste0(getwd(),"/data/bioclim")
)

# note: 
# (1) the projection layers must exist in the hard disk (as relative to computer RAM); 
# (2) the names of the layers (excluding the name extension) must match the names of the predictor variables. 

#############################
# Create Model (da rivedere)
#############################

#high AUC model
#we simulate two size of training areas (large vs. small)
occ_buffer<- buffer(m_occ,width=4*10^5)
clim_mask <- mask(bne_stack, occ_buffer)
set.seed(1)               
bg_small <- sampleRandom(x=clim_mask,
                         size=100,
                         na.rm=T, #removes the 'Not Applicable' points  
                         sp=T) # return spatial points 
set.seed(1)
bg_big <- sampleRandom(x=bne_stack, size=500, na.rm=T, sp=T)
plot(bne_stack[[1]])
points(bg_big, col="black", cex=0.5)
points(bg_small, col="red", cex=0.5)

#extracting env conditions
env_occ_train <- extract(bne_stack, occ_train)
env_occ_test <- extract(bne_stack, occ_test)

#extracting env conditions for background
env_bg_small <- extract(bne_stack,bg_small)  
env_bg_big   <- extract(bne_stack,bg_big  )  

# prepare data frame for maxent
myPredictors_small <- data.frame(rbind(env_occ_train,env_bg_small))
myPredictors_big   <- data.frame(rbind(env_occ_train,env_bg_big  ))

myResponse_small <- c(rep(1,nrow(env_occ_train)),
                      rep(0,nrow(env_bg_small))) 
myResponse_big  <-  c(rep(1,nrow(env_occ_train)),
                      rep(0,nrow(env_bg_big)))

# set up the parameters
myparameters <- prepPara(userfeatures="LQ",
                         betamultiplier=1,
                         projectionlayers=paste0(getwd(),"/data/bioclim")
)

# do the models

mod_small <- dismo::maxent(x = myPredictors_small,
                    p = myResponse_small)
                    
mod_big <- maxent(x=myPredictors_big,
                       p=myResponse_big)

ped_small <- predict(mod_small, clim_mask)
ped_big <- predict(mod_big, clim_mask)
ped_diff <- ped_small-ped_big
ped_combined <- stack(ped_small, ped_big, ped_diff)
names(ped_combined) <- c("small_trainingArea", "big_trainingArea", "difference")
plot(ped_combined)

#compare the AUC, extract test occ data
mod_eval_small <- evaluate(p=env_occ_test,a=env_bg_small,model=mod_small) 
mod_eval_big   <- dismo::evaluate(p=env_occ_test,a=env_bg_big,  model=mod_big) 
cat("AUC of small training area is: ",mod_eval_small@auc )
cat("AUC of big   training area is: ",mod_eval_big@auc )

#model competitation
#prepare data input for ENMeval

#####################
#da rivedere
#####################
