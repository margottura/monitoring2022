#GLM e GAM
#load required libraries
library(spatialEco)
library(dismo)
library(disdat)
library(sf)
library(geodata)
library(dplyr)
library(tidyr)

setwd("C:/Documenti/Laurea magistrale/Tirocinio Duccio")

#upload occurrence data from gbif
m_occ <- read.csv("m_occ.csv", sep="\t")
m_occ

#wordlclim data
#Brisbane wordlclim data
wclim_aus <- worldclim_country("AUS", var="bio", res=10, versione="2.1", path="C:/Documenti/Laurea magistrale/Tirocinio Duccio")
names(wclim_aus)<- c("Annual Mean Temperature", "Mean Diurnal Range", "Isothermality", "Temperature Seasonality", "Max Temperature of Warmest Month", "Min Temperature of Coldest Month", "Temperature Annual Range", "Mean Temperature of Wettest Quarter", "Mean Temperature of Driest Quarter", "Mean Temperature of Warmest Quarter", "Mean Temperature of Coldest Quarter", "Annual Precipitation", "Precipitation of Wettest Month", "Precipitation of Driest Month", "Precipitation Seasonality", "Precipitation of Wettest Quarter", "Precipitation of Driest Quarter", "Precipitation of Warmest Quarter", "Precipitation of Coldest Quarter")

#crop for Brisbane area (lat min 153, lat max 153.5, lon min -27.5, lon max -27.1)
bne_ext <- c(153, 153.5, -27.5, -27.1)
ext <- extent(bne_ext[1], bne_ext[2], bne_ext[3], bne_ext[4])

wclim_bne <- crop(wclim_aus, ext)
wclim_bne <- wclim_bne[[c(2,3,5,6,10,17,19)]]
wclim_bne

#create a stack of raster with bne wclim data
bne_stack <- stack(wclim_bne)
bne_stack

#generating background points
bg <- randomPoints(bne_stack, n=500)%>%as.data.frame()
colnames(bg) <- c("decimalLongitude", "decimalLatitude")
bg <- bg[, c(2,1)]
bg


m_occ <- read.csv("m_occ.csv", sep="\t")
occurrences <- m_occ[, c("decimalLatitude", "decimalLongitude")]%>%as.data.frame()
occurrences

#extract raster values and create training data
training <- bind_rows(occurrences, bg)%>%mutate(occ = c(rep(1, nrow(occurrences)), rep(0, nrow(bg))))

#spatial analysis
#make occurrence data spatial
coordinates(training) <- ~ decimalLongitude + decimalLatitude

cat("the previous object is: ", class(training),"\n") 
head(training@coords)
crs(training)
# Define the coordinate system that will be used
myCRS <- CRS("+init=epsg:4326") # WGS 84
crs(training) <- myCRS
crs(training)

#extract  conditions of occ raster layers
env_coords <- extract(bne_stack, training)
head(env_coords)

coords_df <- as.data.frame(env_coords)

training_df <- as.data.frame(training)

#create a dataframe with all the information
complete_data <- cbind(training, coords_df)
complete_data <- as.data.frame(complete_data)
complete_data <- na.omit(complete_data)
names(complete_data)

#glm model
glm <- glm(occ  ~ 1 + Mean.Diurnal.Range + Isothermality + Max.Temperature.of.Warmest.Month + Min.Temperature.of.Coldest.Month + Mean.Temperature.of.Warmest.Quarter + Precipitation.of.Driest.Quarter + Precipitation.of.Coldest.Quarter, data = complete_data, family = "binomial")

library(ggplot2)  
library(viridis)

#create predictions plot
predictions <- data.frame(decimalLongitude = complete_data$decimalLongitude,
                          decimalLatitude = complete_data$decimalLatitude,
                          predictions = predict(glm, newdata = complete_data, type = "response"))
ggplot(predictions, aes(x = decimalLongitude, y = decimalLatitude)) +
  geom_point(alpha = 0.3, aes(color = predictions)) +
  scale_color_viridis_c(name = "Predictions") +
  labs(title = "Predicted Distribution Map")


#GAM
if (is.element("package:mgcv", search())) 
  detach("package:mgcv") ## make sure the mgcv package is not loaded to avoid conflicts between packages

library(gam)

gam <- gam(occ  ~  s(Mean.Diurnal.Range, 2) + s(Isothermality,2) + s(Max.Temperature.of.Warmest.Month, 2) + s(Min.Temperature.of.Coldest.Month,2) + s(Mean.Temperature.of.Warmest.Quarter,2) + s(Precipitation.of.Driest.Quarter,2) + s(Precipitation.of.Coldest.Quarter,2), data = complete_data, family = "binomial")

plot(gam, se = T)

predictions_gam <- data.frame(decimalLongitude = complete_data$decimalLongitude,
                              decimalLatitude = complete_data$decimalLatitude,
                              predictions = predict(gam, type = "response", newdata = complete_data))

ggplot(predictions_gam, aes(x = decimalLongitude, y = decimalLatitude)) +
  geom_point(alpha = 0.3, aes(color = predictions)) +
  scale_color_viridis_c(name = "Predictions") +
  labs(title = "Predicted Distribution Map for GAM Model")
